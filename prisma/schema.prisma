// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MERCHANT
  ADMIN
}

enum OfferStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum AuctionStatus {
  SCHEDULED
  ACTIVE
  ENDED
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  phoneNumber           String?                @unique
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  // New fields for MERCHANT role
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  accounts           Account[]
  biddings           Bid[]
  auctionLikes       AuctionLike[]
  saleLikes          SaleLike[]
  VerificationToken  VerificationToken[]
  PasswordResetToken PasswordResetToken[]
  TwoFactorToken     TwoFactorToken[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  activeAccount Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Company {
  id        String @id @default(cuid())
  name      String
  address   String
  country   String
  vatNumber String

  users User[]
}

model AuctionLike {
  id        String @id @default(cuid())
  userId    String
  auctionId String

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction Auctions @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model SaleLike {
  id     String @id @default(cuid())
  userId String
  saleId String

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  sale Sales @relation(fields: [saleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, saleId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Car {
  id    String @id @default(cuid())
  make  String
  model String

  auctions Auctions[]
  sales    Sales[]

  @@unique([make, model])
}

model Sales {
  id              String   @id @default(cuid())
  mileage         Int
  state           String
  circulationDate DateTime
  fuelType        String
  power           Int
  transmission    String
  carBody         String
  gearBox         String
  color           String
  doors           Int
  seats           Int

  price  Int
  status OfferStatus @default(ACTIVE)

  carId String
  car   Car    @relation(fields: [carId], references: [id], onDelete: Cascade)

  saleLikes   SaleLike[]
  offerImages OfferImages[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Auctions {
  id              String   @id @default(cuid())
  mileage         Int
  state           String
  circulationDate DateTime
  fuelType        String
  power           Int
  transmission    String
  carBody         String
  gearBox         String
  color           String
  doors           Int
  seats           Int

  startDate       DateTime @default(now())
  endDate         DateTime
  startPrice      Int
  maxPrice        Int
  reservePrice    Int
  currentBid      Int
  bidIncrement    Int      @default(100)
  currentBidderId String?
  biddersCount    Int      @default(0)
  winnerId        String?

  onlyForMerchants Boolean     @default(false)
  status           OfferStatus @default(ACTIVE)

  carId String
  car   Car    @relation(fields: [carId], references: [id], onDelete: Cascade)

  bids         Bid[]
  auctionLikes AuctionLike[]
  offerImages  OfferImages[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([startDate, endDate])
}

model Bid {
  id        String @id @default(cuid())
  userId    String
  auctionId String
  price     Int

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auctions Auctions @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, auctionId, price])
}

model OfferImages {
  id        String  @id @default(cuid())
  auctionId String?
  saleId    String?
  url       String
  order     Int // Field to store the order of the image

  auctions Auctions? @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  sales    Sales?    @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@unique([auctionId, order]) // Ensure unique combination of carBidId and order
  @@unique([saleId, order]) // Ensure unique combination of carSaleId and order
}
