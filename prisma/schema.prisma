// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MERCHANT
  ADMIN
}

enum OfferStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  phoneNumber           String?                @unique
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  // New fields for MERCHANT role
  companyId String?
  company Company? @relation(fields: [companyId], references: [id])

  accounts Account[]
  biddings Bid[]
  likes Like[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  activeAccount Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Company {
  id      String @id @default(cuid())
  name    String
  address String
  country String
  vatNumber String

  users User[]
}

model Like {
  id       String @id @default(cuid())
  userId   String
  carBidId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  carBid CarBid @relation(fields: [carBidId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, carBidId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Car {
  id    String @id @default(cuid())
  make  String
  model String

  carBids CarBid[]

  @@unique([make, model])
}

model CarBid {
  id              String    @id @default(cuid())
  price           Int
  mileage         Int
  state           String
  circulationDate DateTime
  fuelType        String
  power           Int
  transmission    String
  carBody         String
  gearBox         String
  color           String
  doors           Int
  seats           Int
  minPrice        Int?
  maxPrice        Int?
  startDate       DateTime? @default(now())
  endDate         DateTime?

  onlyForMerchants Boolean @default(false)
  status         OfferStatus @default(ACTIVE) 

  carId String
  car   Car    @relation(fields: [carId], references: [id], onDelete: Cascade)

  bids Bid[]
  likes Like[]
  offerImages OfferImages[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bid {
  id       String @id @default(cuid())
  userId   String
  carBidId String
  price    Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  carBid CarBid @relation(fields: [carBidId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OfferImages {
  id      String @id @default(cuid())
  carBidId String
  url  String
  order   Int    // Field to store the order of the image

  carBid CarBid @relation(fields: [carBidId], references: [id], onDelete: Cascade)

  @@unique([carBidId, order]) // Ensure unique combination of carBidId and order
}